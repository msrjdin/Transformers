{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ULMFiT",
      "provenance": [],
      "authorship_tag": "ABX9TyMRXk01qDcUVM+0QP6Gy2xA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "TPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/msrjdin/Transformers/blob/master/ULMFiT/TextClassification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K0tTnpLxNnyf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "import fastai\n",
        "from fastai import *\n",
        "from fastai.text import * \n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from functools import partial\n",
        "import io\n",
        "import os\n",
        "\n",
        "from nltk.corpus import stopwords"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a5ZmN4SgfrRa",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "0ef3ac26-9ae9-4551-dd49-be8d22f3a624"
      },
      "source": [
        "import nltk\n",
        "nltk.download('stopwords')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q6M7CA7MHcSw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bn6BjhbaJNsR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "f5eaa56a-e66a-4ad4-91df-497e779f63db"
      },
      "source": [
        "!pwd"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lcihCFPdNsCd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = pd.read_csv('Data.csv')"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZQAGmZdwJY3d",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "055538cb-2d38-459d-e769-9ab420bba13f"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>asin</th>\n",
              "      <th>Rating5</th>\n",
              "      <th>title</th>\n",
              "      <th>body</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>0</td>\n",
              "      <td>Stupid phone</td>\n",
              "      <td>DON'T BUY OUT OF SERVICE</td>\n",
              "      <td>49.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>0</td>\n",
              "      <td>Exellent Service</td>\n",
              "      <td>I have been with nextel for nearly a year now ...</td>\n",
              "      <td>49.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>1</td>\n",
              "      <td>I love it</td>\n",
              "      <td>I just got it and have to say its easy to use,...</td>\n",
              "      <td>49.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>0</td>\n",
              "      <td>Phones locked</td>\n",
              "      <td>1 star because the phones locked so I have to ...</td>\n",
              "      <td>49.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>1</td>\n",
              "      <td>Excellent product</td>\n",
              "      <td>The product has been very good. I had used thi...</td>\n",
              "      <td>49.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         asin  ...  price\n",
              "0  B0009N5L7K  ...  49.95\n",
              "1  B0009N5L7K  ...  49.95\n",
              "2  B0009N5L7K  ...  49.95\n",
              "3  B0009N5L7K  ...  49.95\n",
              "4  B0009N5L7K  ...  49.95\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mq7dBc4bfYHw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "3b13b969-f3ef-4b83-d7c4-ae9982010093"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(67756, 5)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iu1LExn_fZn3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "3e42fd1f-b5b1-4738-d6fa-8658a9f34e9e"
      },
      "source": [
        "df.Rating5.value_counts()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    37630\n",
              "0    30126\n",
              "Name: Rating5, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vaCADy4pfcK3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df['body1'] = df['body'].str.replace(\"[^a-zA-Z]\", \" \")\n",
        "df['body1'] = df['body1'].apply(lambda x: [i for i in x.split(' ') if i.lower() not in stopwords.words('english')])"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FNzCSRwNnoBt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df['body1'] = df['body1'].apply(lambda x: ' '.join(x))"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hTTknNWOnCU5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 271
        },
        "outputId": "793e5f1e-047c-4a8e-eda7-76179647c540"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>asin</th>\n",
              "      <th>Rating5</th>\n",
              "      <th>title</th>\n",
              "      <th>body</th>\n",
              "      <th>price</th>\n",
              "      <th>body1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>0</td>\n",
              "      <td>Stupid phone</td>\n",
              "      <td>DON'T BUY OUT OF SERVICE</td>\n",
              "      <td>49.95</td>\n",
              "      <td>BUY SERVICE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>0</td>\n",
              "      <td>Exellent Service</td>\n",
              "      <td>I have been with nextel for nearly a year now ...</td>\n",
              "      <td>49.95</td>\n",
              "      <td>nextel nearly year started time last year Moto...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>1</td>\n",
              "      <td>I love it</td>\n",
              "      <td>I just got it and have to say its easy to use,...</td>\n",
              "      <td>49.95</td>\n",
              "      <td>got say easy use  hear person talking fine pro...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>0</td>\n",
              "      <td>Phones locked</td>\n",
              "      <td>1 star because the phones locked so I have to ...</td>\n",
              "      <td>49.95</td>\n",
              "      <td>star phones locked pay additional fees unlock</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>B0009N5L7K</td>\n",
              "      <td>1</td>\n",
              "      <td>Excellent product</td>\n",
              "      <td>The product has been very good. I had used thi...</td>\n",
              "      <td>49.95</td>\n",
              "      <td>product good  used cell phone one projects wor...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         asin  ...                                              body1\n",
              "0  B0009N5L7K  ...                                        BUY SERVICE\n",
              "1  B0009N5L7K  ...  nextel nearly year started time last year Moto...\n",
              "2  B0009N5L7K  ...  got say easy use  hear person talking fine pro...\n",
              "3  B0009N5L7K  ...      star phones locked pay additional fees unlock\n",
              "4  B0009N5L7K  ...  product good  used cell phone one projects wor...\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b6IaJ6yJfigj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# split data into training and validation set\n",
        "df_trn, df_val = train_test_split(df.drop(['body', 'title', 'asin', 'price'], axis=1), stratify = df['Rating5'], test_size = 0.3, random_state = 1)"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ino98EtUnwNr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "96f22f6a-8e01-459a-81b3-2dedefcea452"
      },
      "source": [
        "df_trn.head()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rating5</th>\n",
              "      <th>body1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>39867</th>\n",
              "      <td>1</td>\n",
              "      <td>money  great buy  wear tear Verizon transfer w...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56474</th>\n",
              "      <td>0</td>\n",
              "      <td>Cheap  yes Delivered quickly  Yes Works  Amazo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49938</th>\n",
              "      <td>1</td>\n",
              "      <td>Best phone</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10360</th>\n",
              "      <td>1</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56244</th>\n",
              "      <td>0</td>\n",
              "      <td>Sorry  video unsupported browser   month alrea...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Rating5                                              body1\n",
              "39867        1  money  great buy  wear tear Verizon transfer w...\n",
              "56474        0  Cheap  yes Delivered quickly  Yes Works  Amazo...\n",
              "49938        1                                         Best phone\n",
              "10360        1                                               good\n",
              "56244        0  Sorry  video unsupported browser   month alrea..."
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MSFthFZagE-P",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "f56bd8fb-6be6-4948-df6f-b66d323300c4"
      },
      "source": [
        "# Language model data\n",
        "data_lm = TextLMDataBunch.from_df(train_df = df_trn, valid_df = df_val, path = \"\", text_cols = ['body1'], label_cols = ['Rating5'])\n",
        "\n",
        "# Classifier model data\n",
        "data_clas = TextClasDataBunch.from_df(path = \"\", train_df = df_trn, valid_df = df_val, vocab=data_lm.train_ds.vocab, bs=32, text_cols = ['body1'], label_cols = ['Rating5'])"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0OPkS2gDnHXv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "bd05096d-06d8-4947-aa4b-d7ea41a5dd31"
      },
      "source": [
        "learn = language_model_learner(data_lm, arch = AWD_LSTM, drop_mult=0.7)\n"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading https://s3.amazonaws.com/fast-ai-modelzoo/wt103-fwd.tgz\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GrFcKYdOo09x",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 79
        },
        "outputId": "a3dfff4c-2ab5-4459-865a-1b90cc7ff2e9"
      },
      "source": [
        "# train the learner object with learning rate = 1e-2\n",
        "learn.fit_one_cycle(1, 1e-2)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>5.870454</td>\n",
              "      <td>5.656411</td>\n",
              "      <td>0.154522</td>\n",
              "      <td>1:12:04</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OU0F2BvUpDyQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "learn.save_encoder('ft_enc')"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E42f7FIOpZxw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "255703ed-b48b-4e58-c12e-e68aa8cd6af0"
      },
      "source": [
        "learn = text_classifier_learner(data_clas, arch = AWD_LSTM, drop_mult=0.7)\n",
        "learn.load_encoder('ft_enc')"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RNNLearner(data=TextClasDataBunch;\n",
              "\n",
              "Train: LabelList (47429 items)\n",
              "x: TextList\n",
              "xxbos money great buy wear tear xxmaj verizon transfer worked flawlessly,xxbos xxmaj cheap yes xxmaj delivered quickly xxmaj yes xxmaj works xxmaj amazon want refund money,xxbos xxmaj best phone,xxbos good,xxbos xxmaj sorry video unsupported browser month already touched give three xxunk gets control get often happen new phone\n",
              "y: CategoryList\n",
              "1,0,1,1,0\n",
              "Path: .;\n",
              "\n",
              "Valid: LabelList (20327 items)\n",
              "x: TextList\n",
              "xxbos xxmaj great product great service would highly recommend,xxbos bought second refurbished could tell difference paid phone cost xxmaj definitely get refurbished xxmaj get warranty still heck save big bucks xxmaj unless got xxmaj black xxmaj friday amazon xxup cc got another xxmaj nice xxup iphone xxmaj samsung use xxmaj switch xxup sim cards needed xxmaj wish could xxmaj sims number lol xxmaj reason got xxmaj samsung xxup dex using xxup tv screen android apps certain apps work xxmaj samsung vs iphone xxmaj watching movies xxup nfl games phone stream tv xxmaj still figuring,xxbos xxmaj pixel gateway drug things xxmaj google xxunk xxmaj google xxmaj gmail account course xxmaj googled every stray xxunk xxmaj google haha xxmaj top bottom xxmaj chromebook pair xxmaj pixel looking getting xxmaj chromecast voice box thingy home whatever else xxmaj google dishes google xxmaj thanks xxmaj pixel,xxbos best battery cellphone definitely exceed expectations xxmaj tremendous unit awesome price,xxbos big xxmaj windows xxmaj phone fan bought xxmaj focus day came non xxmaj microsoft employee store buying one later moved xxmaj lumia even better xxmaj windows xxmaj phone xxmaj lumia announced made mind next phone getting got first xxmaj windows xxmaj phone liked hardware thought device lot promise lot stuff gotten dropped software side simply ran time xxmaj unfortunately xxunk new kernel find feeling way xxmaj windows xxmaj phone xxmaj good hardware side xxmaj lumia fantastic xxmaj build quality good phone feels like high quality product feels solid initially feel bit heavier xxmaj lumia honestly issue gotten wireless charging plate yet still back order excited well screen looks fantastic everything looks much sharper older screens sure xxup os scale older applications looks great camera also quite good image stabilization videos looks great performs quite well low light changes live tile setup actually useful thought would part smaller sized live tiles work exactly like larger versions get updated properly status information number new emails etc really give lot flexibility terms arranging home screen little worried change xxmaj bing xxmaj nokia maps would bit awkward particularly enjoyed xxmaj bing xxmaj maps routing based traffic xxmaj overall impressed new maps apps drive worked great turn turn navigation lot little tweaks xxup os fix silly little annoyances noticed xxmaj windows xxmaj phone text selection much easier multi delete text message threads etc xxmaj meh xxmaj honestly start screen changes major xxup os changes phone seem behind scenes hardware differences start screen day day xxmaj windows xxmaj phone experience really changed substantially upgrade new features exist seem like really usability focus tested real world use cases xxmaj kids corner great idea seen elsewhere xxmaj unfortunately put password phone unlock also password locks kids corner well way disable behavior xxmaj maybe made sense someone left lot rest us scratching heads still early really much way apps taking advantage new features make release also number xxmaj windows xxmaj phone apps simply appear store running xxmaj windows xxmaj phone compatible including ones purchased xxmaj presumably go away time people buying issue app gap xxmaj windows xxmaj phone platforms starting close still high profile apps exist interested going especially noticeable smaller services companies local minor league xxunk team may ios xxmaj android apps probably working xxmaj windows xxmaj phone version example xxmaj microsoft recognized seems working hard xxunk interest also throwing money developers port still issue especially people jumping platforms xxmaj bad xxmaj windows xxmaj phone xxmaj microsoft got rid xxmaj zune software sync xxup pc favor xxunk folders xxup pc via drag drop connect phone xxup pc folders xxmaj music xxmaj documents xxmaj videos xxmaj ringtones etc drop files transfer phone actually good thing person wants drag drop files phone way want interact device released xxmaj windows app desktop app xxmaj windows sync content phone xxmaj windows xxunk case desktop software itunes xxmaj unfortunately apps bare bones desktop app crashes almost every time try sync music itunes xxmaj microsoft provided migration path existing users using xxmaj zune software start syncing xxmaj windows xxmaj phone strangely best experience terms syncing phone appears using itunes desktop app actually work actual sync terms syncing things like podcast positions etc phone xxup pc straight copy lot cases album art copied phone either entire xxmaj windows xxmaj phone sync process huge source pain people various forums people ending finding terrible workarounds setup currently way fill gap left behind moving away xxmaj zune software got fancy new phone tons space easy way fill content drag drop really want manage music xxmaj getting rid xxmaj zune software also means sync wifi really one better xxmaj zune features xxmaj xbox xxmaj music xxmaj pass particular cloud features seem somewhat buggy well things randomly working working goes purchases video store although sure supposed work xxmaj windows xxmaj phone xxmaj overall xxmaj hardware wise fantastic zero complaints huge step last generation xxmaj windows xxmaj phones xxmaj unfortunately software wise really seems like similar situation release things look promising really interesting stuff xxmaj windows xxmaj phone started scratch xxmaj windows xxmaj phone seems due time required get everything running new kernel hoping new kernel technology stack allow frequent xxup os updates xxmaj mango style update xxunk already xxmaj hopefully sync software gets better xxmaj microsoft fill gaps match experience similar one xxmaj zune software provided really enjoyable features aimed everything content wise cloud buggy best broken worst xxup update phone months honestly much changed xxmaj sync apps gotten stable none feature gaps xxup wp xxmaj zune xxup wp addressed xxmaj people talked xxunk xxmaj microsoft expressed xxunk current music video podcast experience xxup wp far really seen major effort fix xxmaj xbox video xxup still incompatible xxup wp xxmaj xbox xxmaj music still mess xxup wp getting apps although honestly attribute xxmaj nokia anything xxmaj microsoft done still missing number high profile apps platforms many others lag behind platforms terms features etc also seen much way apps utilizing features specific xxup wp wallet etc speed updates xxup wp really changed much xxup wp got xxmaj xxunk fixed bugs added features xxmaj microsoft largely silent future plans xxmaj hopefully end waiting xxmaj holiday next big update credit xxmaj nokia responsive fixing updating apps frequently seems like general lot excited platform xxmaj microsoft\n",
              "y: CategoryList\n",
              "1,0,1,1,0\n",
              "Path: .;\n",
              "\n",
              "Test: None, model=SequentialRNN(\n",
              "  (0): MultiBatchEncoder(\n",
              "    (module): AWD_LSTM(\n",
              "      (encoder): Embedding(15712, 400, padding_idx=1)\n",
              "      (encoder_dp): EmbeddingDropout(\n",
              "        (emb): Embedding(15712, 400, padding_idx=1)\n",
              "      )\n",
              "      (rnns): ModuleList(\n",
              "        (0): WeightDropout(\n",
              "          (module): LSTM(400, 1152, batch_first=True)\n",
              "        )\n",
              "        (1): WeightDropout(\n",
              "          (module): LSTM(1152, 1152, batch_first=True)\n",
              "        )\n",
              "        (2): WeightDropout(\n",
              "          (module): LSTM(1152, 400, batch_first=True)\n",
              "        )\n",
              "      )\n",
              "      (input_dp): RNNDropout()\n",
              "      (hidden_dps): ModuleList(\n",
              "        (0): RNNDropout()\n",
              "        (1): RNNDropout()\n",
              "        (2): RNNDropout()\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (1): PoolingLinearClassifier(\n",
              "    (layers): Sequential(\n",
              "      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "      (1): Dropout(p=0.27999999999999997, inplace=False)\n",
              "      (2): Linear(in_features=1200, out_features=50, bias=True)\n",
              "      (3): ReLU(inplace=True)\n",
              "      (4): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "      (5): Dropout(p=0.1, inplace=False)\n",
              "      (6): Linear(in_features=50, out_features=2, bias=True)\n",
              "    )\n",
              "  )\n",
              "), opt_func=functools.partial(<class 'torch.optim.adam.Adam'>, betas=(0.9, 0.99)), loss_func=FlattenedLoss of CrossEntropyLoss(), metrics=[<function accuracy at 0x7f39584d9620>], true_wd=True, bn_wd=True, wd=0.01, train_bn=True, path=PosixPath('.'), model_dir='models', callback_fns=[functools.partial(<class 'fastai.basic_train.Recorder'>, add_time=True, silent=False)], callbacks=[RNNTrainer\n",
              "learn: RNNLearner(data=TextClasDataBunch;\n",
              "\n",
              "Train: LabelList (47429 items)\n",
              "x: TextList\n",
              "xxbos money great buy wear tear xxmaj verizon transfer worked flawlessly,xxbos xxmaj cheap yes xxmaj delivered quickly xxmaj yes xxmaj works xxmaj amazon want refund money,xxbos xxmaj best phone,xxbos good,xxbos xxmaj sorry video unsupported browser month already touched give three xxunk gets control get often happen new phone\n",
              "y: CategoryList\n",
              "1,0,1,1,0\n",
              "Path: .;\n",
              "\n",
              "Valid: LabelList (20327 items)\n",
              "x: TextList\n",
              "xxbos xxmaj great product great service would highly recommend,xxbos bought second refurbished could tell difference paid phone cost xxmaj definitely get refurbished xxmaj get warranty still heck save big bucks xxmaj unless got xxmaj black xxmaj friday amazon xxup cc got another xxmaj nice xxup iphone xxmaj samsung use xxmaj switch xxup sim cards needed xxmaj wish could xxmaj sims number lol xxmaj reason got xxmaj samsung xxup dex using xxup tv screen android apps certain apps work xxmaj samsung vs iphone xxmaj watching movies xxup nfl games phone stream tv xxmaj still figuring,xxbos xxmaj pixel gateway drug things xxmaj google xxunk xxmaj google xxmaj gmail account course xxmaj googled every stray xxunk xxmaj google haha xxmaj top bottom xxmaj chromebook pair xxmaj pixel looking getting xxmaj chromecast voice box thingy home whatever else xxmaj google dishes google xxmaj thanks xxmaj pixel,xxbos best battery cellphone definitely exceed expectations xxmaj tremendous unit awesome price,xxbos big xxmaj windows xxmaj phone fan bought xxmaj focus day came non xxmaj microsoft employee store buying one later moved xxmaj lumia even better xxmaj windows xxmaj phone xxmaj lumia announced made mind next phone getting got first xxmaj windows xxmaj phone liked hardware thought device lot promise lot stuff gotten dropped software side simply ran time xxmaj unfortunately xxunk new kernel find feeling way xxmaj windows xxmaj phone xxmaj good hardware side xxmaj lumia fantastic xxmaj build quality good phone feels like high quality product feels solid initially feel bit heavier xxmaj lumia honestly issue gotten wireless charging plate yet still back order excited well screen looks fantastic everything looks much sharper older screens sure xxup os scale older applications looks great camera also quite good image stabilization videos looks great performs quite well low light changes live tile setup actually useful thought would part smaller sized live tiles work exactly like larger versions get updated properly status information number new emails etc really give lot flexibility terms arranging home screen little worried change xxmaj bing xxmaj nokia maps would bit awkward particularly enjoyed xxmaj bing xxmaj maps routing based traffic xxmaj overall impressed new maps apps drive worked great turn turn navigation lot little tweaks xxup os fix silly little annoyances noticed xxmaj windows xxmaj phone text selection much easier multi delete text message threads etc xxmaj meh xxmaj honestly start screen changes major xxup os changes phone seem behind scenes hardware differences start screen day day xxmaj windows xxmaj phone experience really changed substantially upgrade new features exist seem like really usability focus tested real world use cases xxmaj kids corner great idea seen elsewhere xxmaj unfortunately put password phone unlock also password locks kids corner well way disable behavior xxmaj maybe made sense someone left lot rest us scratching heads still early really much way apps taking advantage new features make release also number xxmaj windows xxmaj phone apps simply appear store running xxmaj windows xxmaj phone compatible including ones purchased xxmaj presumably go away time people buying issue app gap xxmaj windows xxmaj phone platforms starting close still high profile apps exist interested going especially noticeable smaller services companies local minor league xxunk team may ios xxmaj android apps probably working xxmaj windows xxmaj phone version example xxmaj microsoft recognized seems working hard xxunk interest also throwing money developers port still issue especially people jumping platforms xxmaj bad xxmaj windows xxmaj phone xxmaj microsoft got rid xxmaj zune software sync xxup pc favor xxunk folders xxup pc via drag drop connect phone xxup pc folders xxmaj music xxmaj documents xxmaj videos xxmaj ringtones etc drop files transfer phone actually good thing person wants drag drop files phone way want interact device released xxmaj windows app desktop app xxmaj windows sync content phone xxmaj windows xxunk case desktop software itunes xxmaj unfortunately apps bare bones desktop app crashes almost every time try sync music itunes xxmaj microsoft provided migration path existing users using xxmaj zune software start syncing xxmaj windows xxmaj phone strangely best experience terms syncing phone appears using itunes desktop app actually work actual sync terms syncing things like podcast positions etc phone xxup pc straight copy lot cases album art copied phone either entire xxmaj windows xxmaj phone sync process huge source pain people various forums people ending finding terrible workarounds setup currently way fill gap left behind moving away xxmaj zune software got fancy new phone tons space easy way fill content drag drop really want manage music xxmaj getting rid xxmaj zune software also means sync wifi really one better xxmaj zune features xxmaj xbox xxmaj music xxmaj pass particular cloud features seem somewhat buggy well things randomly working working goes purchases video store although sure supposed work xxmaj windows xxmaj phone xxmaj overall xxmaj hardware wise fantastic zero complaints huge step last generation xxmaj windows xxmaj phones xxmaj unfortunately software wise really seems like similar situation release things look promising really interesting stuff xxmaj windows xxmaj phone started scratch xxmaj windows xxmaj phone seems due time required get everything running new kernel hoping new kernel technology stack allow frequent xxup os updates xxmaj mango style update xxunk already xxmaj hopefully sync software gets better xxmaj microsoft fill gaps match experience similar one xxmaj zune software provided really enjoyable features aimed everything content wise cloud buggy best broken worst xxup update phone months honestly much changed xxmaj sync apps gotten stable none feature gaps xxup wp xxmaj zune xxup wp addressed xxmaj people talked xxunk xxmaj microsoft expressed xxunk current music video podcast experience xxup wp far really seen major effort fix xxmaj xbox video xxup still incompatible xxup wp xxmaj xbox xxmaj music still mess xxup wp getting apps although honestly attribute xxmaj nokia anything xxmaj microsoft done still missing number high profile apps platforms many others lag behind platforms terms features etc also seen much way apps utilizing features specific xxup wp wallet etc speed updates xxup wp really changed much xxup wp got xxmaj xxunk fixed bugs added features xxmaj microsoft largely silent future plans xxmaj hopefully end waiting xxmaj holiday next big update credit xxmaj nokia responsive fixing updating apps frequently seems like general lot excited platform xxmaj microsoft\n",
              "y: CategoryList\n",
              "1,0,1,1,0\n",
              "Path: .;\n",
              "\n",
              "Test: None, model=SequentialRNN(\n",
              "  (0): MultiBatchEncoder(\n",
              "    (module): AWD_LSTM(\n",
              "      (encoder): Embedding(15712, 400, padding_idx=1)\n",
              "      (encoder_dp): EmbeddingDropout(\n",
              "        (emb): Embedding(15712, 400, padding_idx=1)\n",
              "      )\n",
              "      (rnns): ModuleList(\n",
              "        (0): WeightDropout(\n",
              "          (module): LSTM(400, 1152, batch_first=True)\n",
              "        )\n",
              "        (1): WeightDropout(\n",
              "          (module): LSTM(1152, 1152, batch_first=True)\n",
              "        )\n",
              "        (2): WeightDropout(\n",
              "          (module): LSTM(1152, 400, batch_first=True)\n",
              "        )\n",
              "      )\n",
              "      (input_dp): RNNDropout()\n",
              "      (hidden_dps): ModuleList(\n",
              "        (0): RNNDropout()\n",
              "        (1): RNNDropout()\n",
              "        (2): RNNDropout()\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (1): PoolingLinearClassifier(\n",
              "    (layers): Sequential(\n",
              "      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "      (1): Dropout(p=0.27999999999999997, inplace=False)\n",
              "      (2): Linear(in_features=1200, out_features=50, bias=True)\n",
              "      (3): ReLU(inplace=True)\n",
              "      (4): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "      (5): Dropout(p=0.1, inplace=False)\n",
              "      (6): Linear(in_features=50, out_features=2, bias=True)\n",
              "    )\n",
              "  )\n",
              "), opt_func=functools.partial(<class 'torch.optim.adam.Adam'>, betas=(0.9, 0.99)), loss_func=FlattenedLoss of CrossEntropyLoss(), metrics=[<function accuracy at 0x7f39584d9620>], true_wd=True, bn_wd=True, wd=0.01, train_bn=True, path=PosixPath('.'), model_dir='models', callback_fns=[functools.partial(<class 'fastai.basic_train.Recorder'>, add_time=True, silent=False)], callbacks=[...], layer_groups=[Sequential(\n",
              "  (0): Embedding(15712, 400, padding_idx=1)\n",
              "  (1): EmbeddingDropout(\n",
              "    (emb): Embedding(15712, 400, padding_idx=1)\n",
              "  )\n",
              "), Sequential(\n",
              "  (0): WeightDropout(\n",
              "    (module): LSTM(400, 1152, batch_first=True)\n",
              "  )\n",
              "  (1): RNNDropout()\n",
              "), Sequential(\n",
              "  (0): WeightDropout(\n",
              "    (module): LSTM(1152, 1152, batch_first=True)\n",
              "  )\n",
              "  (1): RNNDropout()\n",
              "), Sequential(\n",
              "  (0): WeightDropout(\n",
              "    (module): LSTM(1152, 400, batch_first=True)\n",
              "  )\n",
              "  (1): RNNDropout()\n",
              "), Sequential(\n",
              "  (0): PoolingLinearClassifier(\n",
              "    (layers): Sequential(\n",
              "      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "      (1): Dropout(p=0.27999999999999997, inplace=False)\n",
              "      (2): Linear(in_features=1200, out_features=50, bias=True)\n",
              "      (3): ReLU(inplace=True)\n",
              "      (4): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "      (5): Dropout(p=0.1, inplace=False)\n",
              "      (6): Linear(in_features=50, out_features=2, bias=True)\n",
              "    )\n",
              "  )\n",
              ")], add_time=True, silent=False)\n",
              "alpha: 2.0\n",
              "beta: 1.0], layer_groups=[Sequential(\n",
              "  (0): Embedding(15712, 400, padding_idx=1)\n",
              "  (1): EmbeddingDropout(\n",
              "    (emb): Embedding(15712, 400, padding_idx=1)\n",
              "  )\n",
              "), Sequential(\n",
              "  (0): WeightDropout(\n",
              "    (module): LSTM(400, 1152, batch_first=True)\n",
              "  )\n",
              "  (1): RNNDropout()\n",
              "), Sequential(\n",
              "  (0): WeightDropout(\n",
              "    (module): LSTM(1152, 1152, batch_first=True)\n",
              "  )\n",
              "  (1): RNNDropout()\n",
              "), Sequential(\n",
              "  (0): WeightDropout(\n",
              "    (module): LSTM(1152, 400, batch_first=True)\n",
              "  )\n",
              "  (1): RNNDropout()\n",
              "), Sequential(\n",
              "  (0): PoolingLinearClassifier(\n",
              "    (layers): Sequential(\n",
              "      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "      (1): Dropout(p=0.27999999999999997, inplace=False)\n",
              "      (2): Linear(in_features=1200, out_features=50, bias=True)\n",
              "      (3): ReLU(inplace=True)\n",
              "      (4): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "      (5): Dropout(p=0.1, inplace=False)\n",
              "      (6): Linear(in_features=50, out_features=2, bias=True)\n",
              "    )\n",
              "  )\n",
              ")], add_time=True, silent=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5K6o_ioZpqYv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "outputId": "1cb6e1ea-55d6-4875-d67e-5c8e00e4d2f8"
      },
      "source": [
        "learn.fit_one_cycle(2, 1e-3)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>0.581007</td>\n",
              "      <td>0.506863</td>\n",
              "      <td>0.757859</td>\n",
              "      <td>56:57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>0.581603</td>\n",
              "      <td>0.485012</td>\n",
              "      <td>0.769518</td>\n",
              "      <td>1:03:45</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vb68qzZNpwKZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# get predictions\n",
        "preds, targets = learn.get_preds()\n",
        "\n",
        "predictions = np.argmax(preds, axis = 1)\n",
        "pd.crosstab(predictions, targets)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zm9RFL0YATAy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df_val.shape"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-z4vh1PloxGi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fEnbF8looLjw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}